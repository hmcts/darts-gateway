
import static groovy.io.FileType.FILES
import java.nio.file.Files

plugins {
  id("com.github.bjornvester.wsdl2java") version "2.0.2"
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

configurations {
  jaxb
}

dependencies {
  implementation group: 'org.apache.santuario', name: 'xmlsec', version: '4.0.0'
  implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
  implementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: '1.76'
  implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.76'
  implementation group: 'org.bouncycastle', name: 'bcutil-jdk18on', version: '1.76'

  // https://mvnrepository.com/artifact/org.apache.ws.commons.schema/XmlSchema
  implementation group: 'org.apache.ws.commons.schema', name: 'XmlSchema', version: '1.4.7'

  implementation group: 'wsdl4j', name: 'wsdl4j', version: wsdl4jVersion
  jaxb( 'org.glassfish.jaxb:jaxb-xjc:4.0.3')
  jaxb( 'org.glassfish.jaxb:jaxb-runtime:4.0.3')

  // https://mvnrepository.com/artifact/io.github.openfeign/feign-jackson
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation group: 'io.github.openfeign', name: 'feign-okhttp', version: '12.5'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.0.4', {
    exclude group: 'commons-fileupload', module: 'commons-fileupload'
  }
// https://mvnrepository.com/artifact/org.apache.commons/commons-fileupload2-jakarta
  implementation group: 'org.apache.commons', name: 'commons-fileupload2-jakarta', version: '2.0.0-M1'
// https://mvnrepository.com/artifact/javax.mail/javax.mail-api
  implementation group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
// https://mvnrepository.com/artifact/javax.activation/activation
  implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
// https://mvnrepository.com/artifact/com.sun.mail/javax.mail
  implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'


  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  //CVE-2023-44487
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: tomcatEmbedVersion
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: tomcatEmbedVersion

  implementation group: 'io.github.openfeign', name: 'feign-okhttp', version: '12.5'
  constraints {
    implementation('com.squareup.okio:okio:3.6.0') {
      because 'version 3.0.0 has vulnerability CVE-2023-3635'
    }
  }

  implementation 'org.zalando:problem-spring-web-starter:0.29.1'
  implementation 'org.apache.commons:commons-collections4:4.4'

  implementation 'org.mapstruct:mapstruct:1.5.5.Final'
  implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation(platform('org.junit:junit-bom:5.10.0'))
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
  testImplementation group: 'org.springframework.ws', name: 'spring-ws-test', version: '4.0.6'
  testImplementation group: 'commons-io', name: 'commons-io', version: '2.14.0'// CVE-2021-29425
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '4.0.4'
  testImplementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
  testImplementation 'org.xmlunit:xmlunit-core:2.9.1'
  testImplementation 'org.xmlunit:xmlunit-matchers:2.9.1'
}

sourceSets {
  main {
    java {
      srcDir("$buildDir/generated/sources/wsdl2java/ContextRegistryService/java")
    }
  }
}



tasks.register('processContextRegistryWSDL', CreateAPIMWSDLFile)
  {
    wsdlFile = new File( "$projectDir/src/main/resources/ws/contextRegistry/ContextRegistryService.wsdl")
    urlToReplace = "http://test"
    outputFile = new File("$projectDir/src/main/resources/ws/ContextRegistryService.wsdl")
  }

/**
 *  Take a WSDL file with imported xsd files that are at the same location as the wsdl (needs to be a flat structure)
 */
import groovy.xml.XmlSlurper;
import groovy.xml.XmlUtil;
import groovy.xml.slurpersupport.GPathResult;
class CreateAPIMWSDLFile extends DefaultTask {

  /** The WSDL location */
  @InputFile
  File wsdlFile = new File("src/main/resources/ws/contextRegistry/ContextRegistryService.wsdl")

  /** The WSDL url to use*/
  @Input
  String urlToReplace = "http://test"

  /** The output file where the compatible APIM file will be spat out*/
  @OutputFile
  File outputFile = new File("src/main/resources/ws/ContextRegistryService.wsdl")

  @TaskAction
  void join() {
    File f =  wsdlFile;
    XmlSlurper parser = createSlurper();
    def doc = parser.parse(new StringReader(f.getText()));
    def node = process(doc);

    // serialize the xml to a string
    def xmlOutput = XmlUtil.serialize(node);
    outputFile.write(xmlOutput);
  }

  // setup the slarper with the relevant feature enabled that preserves xml namespaces
  static XmlSlurper createSlurper()
  {
    XmlSlurper parser = new XmlSlurper(false, true);
    parser.setFeature("http://xml.org/sax/features/validation", false)
    parser.setFeature('http://xml.org/sax/features/namespaces', true)
    parser.setFeature('http://xml.org/sax/features/namespace-prefixes', true)
    return parser;
  }

  /**
   * sets up some name spaces so we can search for name space targetted items
   */
  static void setupWithNamespace(var xsd)
  {
    xsd.declareNamespace(
      xsd: 'http://www.w3.org/2001/XMLSchema');

    xsd.declareNamespace(
      wsdl: 'http://schemas.xmlsoap.org/wsdl/');

    xsd.declareNamespace(
      soap: 'http://schemas.xmlsoap.org/wsdl/soap/');
  }

  GPathResult process(GPathResult xsd)
  {
    setupWithNamespace(xsd);

    def types = xsd.'wsdl:types';

    // we we a wsdl structure and do we have a types block
    if (types.size() > 0) {

      // replace the placeholder with the specified url
      replaceWithUrl(xsd)

      var schemas = types.'xsd:schema';
      var schemaToAdd = new ArrayList()
      for (def schema : schemas) {
        var xsdFile = schema.'xsd:import'.@schemaLocation;

        if (xsdFile.size() > 0) {

          // if we have an import file referenced then recurse and process the xsd
          var doc = createSlurper().parse(new File(wsdlFile.getParent().toString() + "/" + xsdFile[0]));
          doc = process(doc)
          schemaToAdd.add(doc)
        }

        // remove all processed files
        schema.replaceNode({})
      }

      // now add the new schema content to the wsdl
      for (def schema : schemaToAdd) {
        types.appendNode(schema)
      }
    }
    else
    {
      // remove any imports as these are assumed to be referenced from the top level wsdl
      def xsdImports = xsd.'xsd:import';
      for (def xsdImport : xsdImports) {
        xsdImport.replaceNode({ })
      }

      // We remove any name spaces around an individual element as this was causing problems. May need to
      // revisit this
      removeElementNamespace(xsd)
    }

    return xsd;
  }

  /**
   * replace the placeholder string with the url
   */
  void replaceWithUrl(var doc)
  {
    var node = doc.'wsdl:service'.'wsdl:port'.'soap:address';
    var locationAttribute = node.@location
    if (locationAttribute.equals('REPLACE_WITH_ACTUAL_URL'))
    {
      // set the location attribute
      node.@location = urlToReplace
    }
  }

  static void removeElementNamespace(var doc)
  {
    // clear down any namespace around an element
    doc.'**'.findAll { node ->
      {
        if (node.name().endsWith("element")) {
          var key;

          node.attributes().find {
            if (it.key!=null && it.key.toString().startsWith("xmlns")) {
              key = it
            }
          }

          if (key!=null) {
            var name = node.attributes().name

            // clear all elements from the node
            node.attributes().removeAll{return true}

            // reapply the name to the element as this is mandatory
            node.attributes().put("name", name)
          }
        }
      }
    }
  }
}

wsdl2java {
  wsdlDir.set(layout.projectDirectory.dir("src/main/resources/ws"))
  includes = [
    "**/ContextRegistryService.wsdl"
  ]
  packageName.set("contextreg")
  generatedSourceDir.set(layout.projectDirectory.dir("$buildDir/generated/sources/wsdl2java/ContextRegistryService/java"))
}

project.tasks.processResources.dependsOn processContextRegistryWSDL
project.tasks.wsdl2java.dependsOn processContextRegistryWSDL
compileJava.dependsOn processContextRegistryWSDL
