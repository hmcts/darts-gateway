plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'idea'
  id "io.freefair.lombok" version "8.4"
  id 'io.spring.dependency-management' version '1.1.3'
  id 'org.springframework.boot' version '3.1.5'
  id 'org.owasp.dependencycheck' version '8.4.0'
  id 'com.github.ben-manes.versions' version '0.49.0'
  id 'org.sonarqube' version '4.4.1.3373'
  id 'java-library'
  id "org.openapi.generator" version "7.0.1"
  id("com.github.bjornvester.wsdl2java") version "2.0.2"
  id 'maven-publish'
  id "com.dorongold.task-tree" version "2.1.1"
}

import static groovy.io.FileType.FILES
import java.nio.file.Files

group = 'uk.gov.hmcts'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

configurations.all {
  exclude group: 'org.bouncycastle', module: 'bcpkix-jdk15on'
  exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on' // bcprov-jdk15on-1.69.jar CVE-2023-33201
  exclude group: 'org.bouncycastle', module: 'bcutil-jdk15on'
}

ext {
  tomcatEmbedVersion = "10.1.15"
}

configurations {
  jaxb
  openapispec
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = false
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = false
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.12.4'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

def sonarExclusions = [
  '**/com/emc/**',
  '**/com/service/**',
  '**/com/synapps/**',
  '**/com/viqsoultions/**',
  '**/uk/gov/courtservice/**',
  '**/uk/gov/addcase/**',
  'src/main/java/generated/**',
  '**/uk/gov/hmcts/darts/**/model/**',
  '**/uk/gov/hmcts/darts/**/config/**',
  '**/enums/**'
]

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: darts-gateway"
    property "sonar.projectKey", "uk.gov.hmcts.reform:darts-gateway"
    property "sonar.exclusions", sonarExclusions.join(', ')
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.20.0"
  wsdl4jVersion = "1.6.3"
}

ext['snakeyaml.version'] = '2.0'


task generateCodeFromSpecification() {
  doFirst {

    def openApiGenerateTaskList = []

    //here we are going to store swagger files
    def swaggerList = []

    //iteration by swagger file root folder and save into swaggerList variable
    def dir = new File(layout.buildDirectory.dir("extractedSpecs").get().asFile.absolutePath)

    dir.eachFileRecurse(FILES) { file ->
      if (file.getName().endsWith(".yaml") && !file.getName().contains("problem"))
        swaggerList << file
    }

    // Iterate on all swagger files and generate a task for each one with the nomenclature openApiGenerate + swagger name
    swaggerList.each {
      def apiName = it.getName().replace(".yaml", "");
      def apiLocation = it.getAbsolutePath();

      def taskName = "openApiGenerate" + apiName.capitalize()
      openApiGenerateTaskList << taskName

      Task task = tasks.create(taskName, org.openapitools.generator.gradle.plugin.tasks.GenerateTask, {
        generatorName = "spring"
        inputSpec = "${apiLocation}"
        outputDir = "$buildDir/generated/openapi".toString()
        modelPackage = "uk.gov.hmcts.darts.model.".toString() + "${apiName}"
        outputDir = "$buildDir/generated/openapi"
        apiPackage = "uk.gov.hmcts.darts.api.${apiName}"
        modelPackage = "uk.gov.hmcts.darts.model.${apiName}"
        invokerPackage = "uk.gov.hmcts.darts.invoker.${apiName}"
        library="spring-cloud"
        //    https://openapi-generator.tech/docs/generators/java/#config-options
        skipOperationExample = true
        skipValidateSpec = true
        configOptions = [
          dateLibrary   : "java8",
          serializationLibrary       : "jackson",
          useJakartaEe :"true",
          library : "spring-cloud",
          interfaceOnly : "true"
        ]
      })

      task.actions.each { it.execute(task) }
    }
  }
}

sourceSets {
  main {
    java {
      srcDir("$buildDir/generated/openapi/src/main/java")
    }
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web-services'
  implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.6'
  implementation group: 'org.springframework.ws', name: 'spring-ws-security', {
    exclude group: 'com.google.guava', module: 'guava' // guava-30.1-jre.jar CVE-2023-2976, CVE-2020-8908
  }
  implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
  implementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: '1.76'
  implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.76'
  implementation group: 'org.bouncycastle', name: 'bcutil-jdk18on', version: '1.76'

  implementation group: 'wsdl4j', name: 'wsdl4j', version: wsdl4jVersion
  jaxb( 'org.glassfish.jaxb:jaxb-xjc:4.0.3')
  jaxb( 'org.glassfish.jaxb:jaxb-runtime:4.0.3')

  // https://mvnrepository.com/artifact/io.github.openfeign/feign-jackson
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation group: 'io.github.openfeign', name: 'feign-okhttp', version: '12.5'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.0.4', {
    exclude group: 'commons-fileupload', module: 'commons-fileupload'
  }
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  //CVE-2023-44487
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: tomcatEmbedVersion
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: tomcatEmbedVersion

  implementation group: 'io.github.openfeign', name: 'feign-okhttp', version: '12.5'
  constraints {
    implementation('com.squareup.okio:okio:3.6.0') {
      because 'version 3.0.0 has vulnerability CVE-2023-3635'
    }
  }

  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation 'org.zalando:problem-spring-web-starter:0.29.1'
  implementation 'org.apache.commons:commons-collections4:4.4'

  implementation 'org.mapstruct:mapstruct:1.5.5.Final'
  implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation(platform('org.junit:junit-bom:5.10.0'))
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
  testImplementation group: 'org.springframework.ws', name: 'spring-ws-test', version: '4.0.6'
  testImplementation group: 'commons-io', name: 'commons-io', version: '2.14.0'// CVE-2021-29425
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '4.0.4'
  testImplementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
  testImplementation 'org.xmlunit:xmlunit-core:2.9.1'
  testImplementation 'org.xmlunit:xmlunit-matchers:2.9.1'

  openapispec 'com.github.hmcts:darts-api:master-SNAPSHOT:openapi'
}

mainClassName = 'uk.gov.hmcts.darts.Application'

bootJar {
  archiveFileName = "darts-gateway.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

tasks.withType(Checkstyle) {
  exclude 'com/service/mojdarts/synapps/com/**'
  exclude 'com/synapps/moj/dfs/response/*.java'
  exclude 'com/emc/**/*.java'
  exclude 'uk/gov/courtservice/**/*.java'
  exclude 'uk/gov/addcase/**/*.java'
  exclude 'com/viqsoultions/**/*.java'
}

tasks.withType(Pmd) {
  exclude 'com/service/mojdarts/synapps/com/**'
  exclude 'com/synapps/moj/dfs/response/**'
  exclude 'com/emc/**/*.java'
  exclude 'uk/gov/courtservice/**/*.java'
  exclude 'uk/gov/addcase/**/*.java'
  exclude 'com/viqsoultions/**/*.java'
}

sourceSets {
  main {
    java {
      srcDir 'src/main/java'
      srcDir 'build/generated-sources/jaxb'
      srcDir 'src/main/java/generated'
      srcDir 'build/generated-sources/jaxbRegisterNode'
      srcDir 'build/generated-sources/jaxbAddCase'
    }
  }
}

task genJaxb {
  ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
  ext.schema = "src/main/resources/schemas/dar-notify-event.xsd"

  outputs.dir sourcesDir

  doLast() {
    project.ant {
      taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask", classpath: configurations.jaxb.asPath
      mkdir(dir: sourcesDir)

      xjc(destdir: sourcesDir, schema: schema) {
        arg(value: "-wsdl")
        produces(dir: sourcesDir, includes: "**/*.java")
      }
    }
  }
}

task genJaxbRegisterNode {
  ext.sourcesDir = "${buildDir}/generated-sources/jaxbRegisterNode"
  ext.schema = "src/main/resources/schemas/darts-register-node.xsd"

  outputs.dir sourcesDir

  doLast() {
    project.ant {
      taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask", classpath: configurations.jaxb.asPath
      mkdir(dir: sourcesDir)

      xjc(destdir: sourcesDir, package: "com.service.mojdarts.synapps.com.registernode",  schema: schema) {
        arg(value: "-wsdl")

        produces(dir: sourcesDir, includes: "**/*.java")
      }
    }
  }
}

task genJaxbAddCase {
  ext.sourcesDir = "${buildDir}/generated-sources/jaxbAddCase"
  ext.schema = "src/main/resources/schemas/darts-add-case.xsd"

  outputs.dir sourcesDir

  doLast() {
    project.ant {
      taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask", classpath: configurations.jaxb.asPath
      mkdir(dir: sourcesDir)

      xjc(destdir: sourcesDir, package: "com.service.mojdarts.synapps.com.addcase",  schema: schema) {
        arg(value: "-wsdl")

        produces(dir: sourcesDir, includes: "**/*.java")
      }
    }
  }
}


wsdl2java {
    wsdlDir.set(layout.projectDirectory.dir("src/main/resources/ws"))
    includes = [
        "**/*.wsdl"
      ]
}

compileJava.dependsOn genJaxb

task extractOpenSpecification() {
  doFirst {
    configurations.openapispec.getFiles()
      .each {
        def zip = new java.util.zip.ZipFile(it)
        for (def entry : zip.entries()) {
          if (entry == null) return

          String contents = zip.getInputStream(entry).text

          String name = entry.name

          if (name.endsWith(".yaml")) {
            //  Finally, we write the contents to a file
            new File(layout.buildDirectory.dir("extractedSpecs").get().asFile.absolutePath).mkdirs()
            String newFileName = "${layout.buildDirectory.dir("extractedSpecs").get().asFile.absolutePath}/$name"

            def newFile = new File(newFileName)
            newFile.createNewFile()
            newFile.text = contents
          }
        }
      }
  }
}

task openapiJar(type: Jar) {
  archiveClassifier = 'openapi'
  from layout.buildDirectory.dir("processedSpecs").get().asFile
}

configurations {
  openapispecifications
}

artifacts.add('openapispecifications', openapiJar)

publishing {
  publications {
    maven(MavenPublication) {
      artifact openapiJar
    }
  }
}

task updateOpenSpecificationsWithVersion() {

  doLast {
    def fileDir = "$projectDir/src/main/resources/openapi/"

    File openFile = new File(fileDir)

    for (File file : openFile.listFiles()) {
      def fileName = file.getName()
      def contents = Files.readString(file.toPath())

      def response = contents.replace("\044{version}", version)
      File newOASFile = layout.buildDirectory.dir("processedSpecs").get().asFile;

      newOASFile.mkdirs();

      def newFile = new File(newOASFile.absolutePath + File.separator + fileName)
      if (!newFile.exists()) {
        newFile.createNewFile();
      }

      newFile.withWriter('utf-8') {
        writer -> writer.writeLine response
      }
    }
  }
}

/**
 *  Take a WSDL file with imported xsd files that are at the same location as the wsdl (needs to be a flat structure)
 */
import groovy.xml.XmlSlurper;
import groovy.xml.XmlUtil;
import groovy.xml.slurpersupport.GPathResult;
class CreateAPIMWSDLFile extends DefaultTask {

  /** The WSDL location */
  @InputFile
  File wsdlFile = new File("src/main/resources/ws/contextRegistry/ContextRegistryService.wsdl")

  /** The WSDL url to use*/
  @Input
  String urlToReplace = "http://test"

  /** The output file where the compatible APIM file will be spat out*/
  @OutputFile
  File outputFile = new File("src/main/resources/ws/ContextRegistryService.wsdl")

  @TaskAction
  void join() {
    File f =  wsdlFile;
    XmlSlurper parser = createSlurper();
    def doc = parser.parse(new StringReader(f.getText()));
    def node = process(doc);

    // serialize the xml to a string
    def xmlOutput = XmlUtil.serialize(node);
    outputFile.write(xmlOutput);
  }

  // setup the slarper with the relevant feature enabled that preserves xml namespaces
  static XmlSlurper createSlurper()
  {
    XmlSlurper parser = new XmlSlurper(false, true);
    parser.setFeature("http://xml.org/sax/features/validation", false)
    parser.setFeature('http://xml.org/sax/features/namespaces', true)
    parser.setFeature('http://xml.org/sax/features/namespace-prefixes', true)
    return parser;
  }

  /**
   * sets up some name spaces so we can search for name space targetted items
   */
  static void setupWithNamespace(var xsd)
  {
    xsd.declareNamespace(
      xsd: 'http://www.w3.org/2001/XMLSchema');

    xsd.declareNamespace(
      wsdl: 'http://schemas.xmlsoap.org/wsdl/');

    xsd.declareNamespace(
      soap: 'http://schemas.xmlsoap.org/wsdl/soap/');
  }

  GPathResult process(GPathResult xsd)
  {
    setupWithNamespace(xsd);

    def types = xsd.'wsdl:types';

    // we we a wsdl structure and do we have a types block
    if (types.size() > 0) {

      // replace the placeholder with the specified url
      replaceWithUrl(xsd)

      var schemas = types.'xsd:schema';
      var schemaToAdd = new ArrayList()
      for (def schema : schemas) {
        var xsdFile = schema.'xsd:import'.@schemaLocation;

        if (xsdFile.size() > 0) {

          // if we have an import file referenced then recurse and process the xsd
          var doc = createSlurper().parse(new File(wsdlFile.getParent().toString() + "/" + xsdFile[0]));
          doc = process(doc)
          schemaToAdd.add(doc)
        }

        // remove all processed files
        schema.replaceNode({})
      }

      // now add the new schema content to the wsdl
      for (def schema : schemaToAdd) {
        types.appendNode(schema)
      }
    }
    else
    {
      // remove any imports as these are assumed to be referenced from the top level wsdl
      def xsdImports = xsd.'xsd:import';
      for (def xsdImport : xsdImports) {
        xsdImport.replaceNode({ })
      }

      // We remove any name spaces around an individual element as this was causing problems. May need to
      // revisit this
      removeElementNamespace(xsd)
    }

    return xsd;
  }

  /**
   * replace the placeholder string with the url
   */
  void replaceWithUrl(var doc)
  {
    var node = doc.'wsdl:service'.'wsdl:port'.'soap:address';
    var locationAttribute = node.@location
    if (locationAttribute.equals('REPLACE_WITH_ACTUAL_URL'))
    {
      // set the location attribute
      node.@location = urlToReplace
    }
  }

  static void removeElementNamespace(var doc)
  {
    // clear down any namespace around an element
    doc.'**'.findAll { node ->
      {
        if (node.name().endsWith("element")) {
          var key;

          node.attributes().find {
            if (it.key!=null && it.key.toString().startsWith("xmlns")) {
              key = it
            }
          }

          if (key!=null) {
            var name = node.attributes().name

            // clear all elements from the node
            node.attributes().removeAll{return true}

            // reapply the name to the element as this is mandatory
            node.attributes().put("name", name)
          }
        }
      }
    }
  }
}

task generateServerFromOpenAPISpecification() {
  doLast {
    def swaggerList = []
    def dir = new File("$rootDir/src/main/resources/openapi/".toString())
    dir.eachFileRecurse(FILES) { file ->
      if (file.getName().endsWith(".yaml") && file.getName() != "problem.yaml")
        swaggerList << file
    }

    def openApiGenerateTaskList = []

    // Iterate on all swagger files and generate a task for each one with the nomenclature openApiGenerate + swagger name
    swaggerList.each {
      def apiName = it.getName().replace(".yaml", "");
      def taskName = "openApiGenerate" + apiName.capitalize()
      openApiGenerateTaskList << taskName
      System.out.println("CLIENT ${buildDir}")

      Task task = tasks.create(taskName, org.openapitools.generator.gradle.plugin.tasks.GenerateTask, {
        generatorName = "spring"
        inputSpec = "$rootDir/src/main/resources/openapi/".toString() + "${apiName}.yaml"
        outputDir = "$buildDir/generated/openapi".toString()
        apiPackage = "uk.gov.hmcts.dartsgateway.".toString() + "${apiName}" + ".api"
        modelPackage = "uk.gov.hmcts.dartsgateway.".toString() + "${apiName}" + ".model"
        //    https://openapi-generator.tech/docs/generators/java/#config-options
        skipOperationExample = true
        configOptions = [
          dateLibrary   : "java8",
          interfaceOnly : "true",
          useTags       : "true",
          useSpringBoot3: "true"
        ]
      })

      System.out.println("Running")
      task.actions.each { it.execute(task) }
    }
  }
}

/**
 * Run the custom task with the defaults to process the context registry
 */
tasks.register('processContextRegistryWSDL', CreateAPIMWSDLFile)
  {
    wsdlFile = new File("src/main/resources/ws/contextRegistry/ContextRegistryService.wsdl")
    urlToReplace = "http://test"
    outputFile = new File("src/main/resources/ws/ContextRegistryService.wsdl")
  }

/**
 * Run the custom task with the defaults to process the legacy darts service
 */
tasks.register('processDartsServiceWSDL', CreateAPIMWSDLFile)
  {
    wsdlFile = new File("src/main/resources/ws/dartsService/DARTSService.wsdl")
    urlToReplace = "http://test"
    outputFile = new File("src/main/resources/ws/dartsService.wsdl")
  }

project.tasks.processResources.dependsOn processContextRegistryWSDL
project.tasks.processResources.dependsOn processDartsServiceWSDL

project.tasks.wsdl2java.dependsOn processContextRegistryWSDL
project.tasks.wsdl2java.dependsOn processDartsServiceWSDL

compileJava.dependsOn processContextRegistryWSDL
compileJava.dependsOn processDartsServiceWSDL

compileJava.dependsOn updateOpenSpecificationsWithVersion
assemble.dependsOn openapiJar

generateCodeFromSpecification.dependsOn extractOpenSpecification
compileJava.dependsOn generateCodeFromSpecification
compileJava.dependsOn generateServerFromOpenAPISpecification
compileJava.dependsOn genJaxbAddCase, genJaxbRegisterNode
