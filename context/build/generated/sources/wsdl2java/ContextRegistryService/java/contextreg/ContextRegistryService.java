package contextreg;

import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.2
 * Generated source version: 4.0.2
 *
 */
@WebServiceClient(name = "ContextRegistryService",
                  wsdlLocation = "ContextRegistryService.wsdl",
                  targetNamespace = "http://services.rt.fs.documentum.emc.com/")
public class ContextRegistryService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://services.rt.fs.documentum.emc.com/", "ContextRegistryService");
    public final static QName ContextRegistryServicePort = new QName("http://services.rt.fs.documentum.emc.com/", "ContextRegistryServicePort");
    static {
        URL url = ContextRegistryService.class.getResource("ContextRegistryService.wsdl");
        if (url == null) {
            url = ContextRegistryService.class.getClassLoader().getResource("ContextRegistryService.wsdl");
        }
        if (url == null) {
            java.util.logging.Logger.getLogger(ContextRegistryService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "ContextRegistryService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ContextRegistryService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ContextRegistryService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ContextRegistryService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public ContextRegistryService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public ContextRegistryService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public ContextRegistryService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns ContextRegistryServicePort
     */
    @WebEndpoint(name = "ContextRegistryServicePort")
    public ContextRegistryServicePort getContextRegistryServicePort() {
        return super.getPort(ContextRegistryServicePort, ContextRegistryServicePort.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ContextRegistryServicePort
     */
    @WebEndpoint(name = "ContextRegistryServicePort")
    public ContextRegistryServicePort getContextRegistryServicePort(WebServiceFeature... features) {
        return super.getPort(ContextRegistryServicePort, ContextRegistryServicePort.class, features);
    }

}
