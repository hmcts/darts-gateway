<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
  <inbound>
    <base />
    <!-- Extract the SOAP body, stringify and package in JSON object -->
    <set-variable name="requestBody" value="@(context.Request.Body.As<string>(preserveContent: true))" />
    <set-variable name="jsonBody" value="@{
            var requestBody = new {
                document = context.Variables["requestBody"]
            };
            return Newtonsoft.Json.JsonConvert.SerializeObject(requestBody);
        }" />
    <!-- Send the stringfied XML validated & translated into JSON -->
    <send-request mode="new" response-variable-name="transformationResponse" timeout="20" ignore-error="true">
      <set-url>https://72019.wiremockapi.cloud/json</set-url>
      <set-method>POST</set-method>
      <set-header name="Content-Type" exists-action="override">
        <value>application/json</value>
      </set-header>
      <set-body>@((string)context.Variables["jsonBody"])</set-body>
    </send-request>
    <!-- Extract the XML->JSON translation and set as request body -->
    <set-body>@{
      var response = (IResponse)context.Variables["transformationResponse"];
      var jsonResponse = response.Body.As<JObject>();
      var json = jsonResponse["json"]?.ToString();
      return json.ToString();
      }</set-body>
    <set-header name="Content-Type" exists-action="override">
      <value>application/json</value>
    </set-header>
    <set-backend-service base-url="https://${backend-url}" />
  </inbound>
  <backend>
    <base />
  </backend>
  <outbound>
    <base />
    <set-header name="Content-Type" exists-action="override">
      <value>application/json</value>
    </set-header>
    <set-body template="liquid">
      <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">
        <Body>
          <addDocumentResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://com.synapps.mojdarts.service.com">
            <return xmlns="">
              <code>{{body.code}}</code>
              <message>{{body.message}}</message>
            </return>
          </addDocumentResponse>
        </Body>
      </Envelope>
    </set-body>
    <set-header name="Content-Type" exists-action="override">
      <value>text/xml</value>
    </set-header>
  </outbound>
  <on-error>
    <base />
    <choose>
      <when condition="@(context.LastError.Source == "validate-content")">
      <return-response>
        <set-status code="500" />
<!--   TEMP     -->
        <set-header name="ErrorSource" exists-action="override">
          <value>@(context.LastError.Source)</value>
        </set-header>
        <set-header name="ErrorReason" exists-action="override">
          <value>@(context.LastError.Reason)</value>
        </set-header>
        <set-header name="ErrorMessage" exists-action="override">
          <value>@(context.LastError.Message)</value>
        </set-header>
        <set-header name="ErrorScope" exists-action="override">
          <value>@(context.LastError.Scope)</value>
        </set-header>
        <set-header name="ErrorSection" exists-action="override">
          <value>@(context.LastError.Section)</value>
        </set-header>
        <set-header name="ErrorPath" exists-action="override">
          <value>@(context.LastError.Path)</value>
        </set-header>
        <set-header name="ErrorPolicyId" exists-action="override">
          <value>@(context.LastError.PolicyId)</value>
        </set-header>
        <set-header name="ErrorStatusCode" exists-action="override">
          <value>@(context.Response.StatusCode.ToString())</value>
        </set-header>
<!--   TEMP     -->
        <set-header name="Content-Type" exists-action="override">
          <value>text/xml</value>
        </set-header>
        <set-body template="liquid">
          <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">
            <Body>
              <addDocumentResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://com.synapps.mojdarts.service.com">
                <return xmlns="">
                  <code>400</code>
                  <message>Invalid XML Document</message>
                </return>
              </addDocumentResponse>
            </Body>
          </Envelope>
        </set-body>
      </return-response>
    </when>
  </choose>
</on-error>
  </policies>
