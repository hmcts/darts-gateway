<!--
    Use 4 spaces for indentation to avoid formatting issues when the file is deployed.
    APIM will remove any blank lines between policy elements.
-->
<policies>
    <inbound>
        <base />
        <!-- Store original request so it can be output as part of error processing -->
        <set-variable name="origRequest" value="@(context.Request.Body.As<string>(preserveContent: true))" />
        <!--
            Check if the request contains a certificate.  If it does search the entries in the subject field for the part that
            specifies the system id (CN=X#######_## where X is 'C' or 'P' and # is a digit) and extract the system id from it.

            A regular expression is used to identify the part that specifies the system id.

            Note: GetNameInfo() can also be used to get system id - see following email address extraction section.
        -->
        <!-- <choose>
            <when condition="@(context.Request.Certificate == null)">
                <set-variable name="hasCert" value="No certificate" />
            </when>
            <when condition="@(context.Request.Certificate != null)">
                <set-variable name="hasCert" value="Certificate present" />
                <set-variable name="certSubject" value="@(context.Request.Certificate.Subject)" />
                <set-variable name="certSystemId" value="@{
                    string certSubject = context.Request.Certificate.Subject;
                    string[] subjectItems = certSubject.Split(',');
                    string sysId = "";
                    string regexSysId = @"(CN=)([CP][\d]{7}_[\d]{2})";
                    foreach (string item in subjectItems)
                    {
                        foreach (System.Text.RegularExpressions.Match m in System.Text.RegularExpressions.Regex.Matches(item, regexSysId))
                        {
                            sysId = sysId + m.Groups[2].Value;
                        }
                    }
                    return sysId;
                }" />
            </when>
        </choose> -->
        <!--
            Check if the request contains a certificate.  If it does then extract the email address from the certificate.
            GetNameInfo() will extract the email address from either the subject or subjectAltName fields - whichever one
            it appears in.

            GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType.SimpleName, false) returns the CN (Common Name)
            part of the certificate DN (Distinguished Name).  As this is where the SDT System Id is stored it could be used as an
            alternative way to get it rather than parsing the whole subject string.

            References:
            https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate2.getnameinfo?view=net-7.0
            https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509nametype?view=net-7.0
        -->
        <!-- <choose>
            <when condition="@(context.Request.Certificate != null)">
                <set-variable name="certEmail" value="@(context.Request.Certificate.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType.EmailName, false))" />
            </when>
        </choose> -->
        <!--
            The validate-client-certificate policy is used to validate the certificate presented by a client.  This prototype
            uses certificates signed by a custom CA, so the custom root and intermediate CA certificates for it need to be
            added to the Azure API Management instance under the Trusted Root and Intermediate stores respectively.

            The validate-revocation attribute is set to false as the revocation list for the certificates is not available.
            This prevents the validation failing with 'The revocation function was unable to check revocation for the
            certificate" error.  This setting will not be used in the actual system.

            References:
            https://learn.microsoft.com/en-gb/azure/api-management/api-management-access-restriction-policies#validate-client-certificate
            https://learn.microsoft.com/en-gb/azure/api-management/api-management-howto-ca-certificates
            https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/api_management_gateway_certificate_authority (possibly)
        -->
        <!-- <validate-client-certificate validate-not-before="true" validate-not-after="true" validate-revocation="false" /> -->
        <!--
            Check if the request contains a certificate.  If it does then check if it exists within those uploaded to Azure API Management.
            The certificate thumbprint is used to search for a match.

            This could be extended to incorporate at least some of the validation carried out by validate-client-certificate policy, e.g.
            through use of context.Request.Certificate.Verify().

            References:
            https://learn.microsoft.com/en-gb/azure/api-management/api-management-howto-mutual-certificates-for-clients
            https://learn.microsoft.com/en-gb/azure/api-management/api-management-howto-mutual-certificates (for backend but applies here as well)
            https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/api_management_certificate
        -->
        <!-- <choose>
            <when condition="@(context.Request.Certificate != null)">
                <set-variable name="certThumbprint" value="@(context.Request.Certificate.Thumbprint)" />
                <set-variable name="certExists" value="@{
                    string exists = "Cert does not exist in APIM";
                    if (context.Deployment.Certificates.Any(c => c.Value.Thumbprint == context.Request.Certificate.Thumbprint))
                    {
                        exists = "Cert exists in APIM";
                    }
                    return exists;
                }" />
            </when>
        </choose> -->
        <!--
            The validate-content policy is used to validate the content of the request.  Here it is being used to validate the
            content against an XSD that has been added to the Azure API Management instance with the name 'darts-gateway-schema'.
            The "action" attributes describe what should happen if the validation fails - "prevent" blocks the request and returns
            an error.

            Note: Maximum max size is 100KB.  This can only be increased by contacting Azure support.

            References:
            https://learn.microsoft.com/en-us/azure/api-management/validation-policies#validate-content
            https://learn.microsoft.com/en-us/azure/api-management/validation-policies#schemas-for-content-validation
            https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/api_management_api_schema
        -->
        <!-- <validate-content unspecified-content-type-action="prevent" max-size="102400" size-exceeded-action="prevent" errors-variable-name="validateContentErrors">
            <content-type-map any-content-type-value="text/xml" />
            <content type="text/xml" validate-as="soap" action="prevent" schema-id="darts-gateway-schema" />
        </validate-content> -->
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
        <!--
            Set body of response returned when an error occurs.  As the endpoint doesn't exist at the moment this always happens.
            Conveniently, this allows values to be output that check the APIM functionality in the inbound section.

            To aid debugging it's useful to output the built-in context.LastError.Message value.
        -->
        <set-body template="none">@{
            string response;
            response = "Original request body: [" + context.Variables.GetValueOrDefault<string>("origRequest", "default body") + "]\r\n";
            response = response + "Request has cert: [" + context.Variables.GetValueOrDefault<string>("hasCert", "default hasCert") + "]\r\n";
            response = response + "Cert subject: [" + context.Variables.GetValueOrDefault<string>("certSubject", "no cert subject") + "]\r\n";
            response = response + "Cert system id: [" + context.Variables.GetValueOrDefault<string>("certSystemId", "no cert system id") + "]\r\n";
            response = response + "Cert email: [" + context.Variables.GetValueOrDefault<string>("certEmail", "no cert email") + "]\r\n";
            response = response + "Cert thumbprint: [" + context.Variables.GetValueOrDefault<string>("certThumbprint", "no cert thumbprint") + "]\r\n";
            response = response + "Cert exists: [" + context.Variables.GetValueOrDefault<string>("certExists", "no cert exists") + "]\r\n";
            response = response + "Last error: [" + context.LastError.Message + "]";
            return response;
        }</set-body>
    </on-error>
</policies>
